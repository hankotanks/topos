#version 150

in vec3 to;
in float intensity;

out vec4 color;

uniform vec3 light;

float scale_intensity(float upper, float lower, float intensity) {
    return (intensity - lower) / (upper - lower);
}

void main() {
    float heights[5] = float[5](1.0, 0.95, 0.7, 0.6, 0.0);

    vec3 colors[8] = vec3[8](
        vec3(0.1, 0.1, 0.7), vec3(0.1, 0.1, 0.7),
        vec3(0.2, 0.6, 0.1), vec3(0.0, 0.3, 0.0),
        vec3(0.2, 0.2, 0.2), vec3(0.2, 0.6, 0.1),
        vec3(0.9, 0.9, 0.9), vec3(0.2, 0.2, 0.2)
    );

    float brightness = dot(normalize(to), normalize(light));

    vec3 dark;
    vec3 regular;

    for (int i = 0; i < heights.length() - 1; i++) {
        if (intensity <= heights[i] && intensity >= heights[i + 1]) {
            dark = mix(colors[2 * i], colors[2 * i + 1], scale_intensity(heights[i], heights[i + 1], intensity));
            break;
        }
    }

    regular = vec3(dark.x * 0.6, dark.y * 0.6, dark.z * 0.6);

    color = vec4(mix(regular, dark, brightness), 1.0);
}